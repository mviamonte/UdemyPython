#This function define the lesser of two number ONLY when both number are even
#And it will retunr the greater when one or both are odd.
#x and y are the input for the function
def lesser_of_two (x,y):
  if x %2 ==0 and y %2 == 0:
    if x < y:
      return x
    else:
      return y
  elif x %2 ==1 or y %2 ==1:
    if x > y:
      return x
    else:
      return y
result = lesser_of_two(5,11)
print(result)

# Master yoda function to invert the order of the string provided in the function
def masterYoda(input_text):
  split_list = input_text.split()
  split_list.reverse()
  reverse_string = " ".join(split_list)
  return reverse_string
result = masterYoda ("Honey I'm Home")
print (result)

#Find two numbers 3 in a list 
def has_33(nums):
    for index in range (0, len(nums)-1):
        if nums[index] == nums [index+1]:
            return True
        else:
            continue
    return False
result = has_33 ([2,7,6,3])
print (result)

#Given three integers between 1 and 11, if their sum is less than or equal to 21
#return their sum. If their sum exceeds 21 and there's an eleven, reduce the total sum
#by 10. Finally, if the sum (even after adjustment) exceeds 21, return BUST
#Programmer comments: The first part is the "easy" one. Just need to check that the sum
#of the three numbers is less or equal than 21. COOL
#However if their sum is greater than 21 and there is an eleven we need to reduce
#by 10. After the reduction in the last case still exceeds 21, return BUST
#Logic: one "if" statement for the sum less than and one elif to check if it has
#11 on it. The last "else" is to return BUST
#The tricky part is sum the elements of the list
#
def blackjack(a,b,c):
    list_input=[a,b,c]
    list_sum =int()
    reduce_list = int()
    for number in list_input:
        list_sum=list_sum+number
    if list_sum <= 21:
        return list_sum
    elif list_sum > 21 and 11 in list_input:
        reduce_list = list_sum -10
        if reduce_list > 21:
            return "BUST"
        else:
            return reduce_list    
    return list_sum

result = blackjack(11,12,10)
print (result)

##For a given string, return a string where for every character in the original 
#there are three character
#paper_doll("Hello") --> "HHHeeelllooo"
#Programmer comments, I need to iterate trough the string and use de "*" operator
#for every character and return that result
def paper_doll(text):
    new_text =""
    for letter in text:
        new_text = new_text + letter*3
    return new_text
result = paper_doll("Missisippi")
print (result)

#Return the sum of the numbers in the array, except ignore sections of numbers
#starting with a 6 and extending to the next 9 (every 6 will be followed by at least
#one 9). Return 0 for no numbers
#Programmer comments: If there is no six, it's easy. The hard part comes when
#a six is found
#The key here is to understand that i need to use properly the "break" statement
#I made many mistakes, definitely need to check for help because I wasn't 
#sure about how to do it. I did a LOT of debug using the return statement. 

#NOTE TO FIX. It's detecting the number 6 but is adding the number 9 to the summer_69
# Positive note, the number 1 between de 6 and the 9 is not taking in the SUM

def summer_69(array):
    sum =int()
    indicator = True
    for number in array:
        while indicator == True:
            if number !=6:
                sum = sum + number
                break
            else:
                indicator = False
        while indicator == False:
            if number !=9:
                break
            else:
                indicator = True
                break
    return sum, indicator, number
result = summer_69 ([1,7,6,9,1,1])
print (result)

letter = {a:
[" "," "," "," "," "
" "," "," "," "," "
" "," "," "," "," "
" "," "," "," "," "
" "," "," "," "," "]}
]


#COUNT PRIMES: Write a function that returns the number of prime numbers that 
#exist up to and including a given number

def count_primes(values):
    sum=0
    primes=[]
    for number in range(2,values):
        if number ==2 or number ==3 or number ==5 or number ==7 or number %2 !=0 and number %3 !=0 and number %5 !=0 and number %7 !=0:
            sum = sum +1
            primes.append(number)
    return sum,primes
result = count_primes (100)
print (result)
'''Problem type 
Validate string against dictionary

Question(s) asked 
1) Given a string and a list of words, determine if the string is valid based on the list of words

2) Determine if the given string contains valid words while ignoring extraneous characters
Possible approach:
Let's iterate through the dictionary which by default uses "keys" as iterators
Later on, I can try to find in the values or items? Let's see. 
'''

d = {"Bicycle":["BMC","All-City"],"Pets":["Benito","Bilbo"]}
ad ={"Bicycle":"BMC","Pets":"Bilbo"}
def find_string(string):
    list_string = string.split()
    for string_value in list_string:
        for key_value in ad.values():
            if string_value == key_value:
                return True, list_string
    return list_string            
result = find_string ("BMC is great")
print (result)

#Use for, .split(), and if to create a Statement that will print out words that start with 's':
#In this case we need to iterate trough the whole string and to separate them and iterate as 
#a set of strings we need to use the split() method. 
#First I need to save the list generated from the input string
st = 'Print only the words that start with s in this sentence'
def print_s(st):
    s_words = []
    splitted_st = st.split()
    for word in splitted_st:
        if word[0] == "s":
            s_words.append(word)
    return s_words            
result = print_s(st)
print (result)

#Use for, .split(), and if to create a Statement that will print out words that start with 's':
#In this case we need to iterate trough the whole string and to separate them and iterate as 
#a set of strings we need to use the split() method. 
#First I need to save the list generated from the input string
st = 'Print every word that start with s in this sentence'
def print_s(st):
    s_words = []
    even_count = int()
    splitted_st = st.split()
    for word in splitted_st:
        if len(word) %2 ==0:
            even_count = even_count + 1
    return even_count            
result = print_s(st)
print (result)
#print (f"There is {result} words in the sentence")

list = ["iPhone,98,29","Case, 96, 25","Elastic Band, 56,3"]

#Use for, .split(), and if to create a Statement that will print out words that start with 's':
#In this case we need to iterate trough the whole string and to separate them and iterate as 
#a set of strings we need to use the split() method. 
#First I need to save the list generated from the input string
'''st = 'Print every word that start with s in this sentence'
def print_s(st):
    s_words = []
    even_count = int()
    splitted_st = st.split()
    for word in splitted_st:
        if len(word) %2 ==0:
            even_count = even_count + 1
    return even_count            
result = print_s(st)
print(result)'''
guess_number =56
#guess_number.randint(0,100)
while True:
    user_input = int(input("Please provide a number:  "))
    if user_input in range (100):
        if user_input == guess_number:
            print ("Congratulations you guess the number")
            break
        elif user_input <= 30:
            print ("You are WARM, pick again")
    else:
        print ("Number must be in the range of 0-100")
        


## Positional Arguments 
#You need to specify the expected parameters
'''def myfunc (a,b,c=0):
    #Retunrs 5% of the sum of a and b
    return sum ((a,b))*0.05
result = myfunc(40,60,80)
print (result)'''
#The best way of do it is pass the "*args" Arguments
#"*args" will be treated as a "tuple".
#"*args" could be any other string
def myfunc (*args):
    #Returns 5% of the sum of a and b
    return sum ((args))*0.05
result = myfunc(40,60,80)
print (result)
### Sorted program Shopify failed interview
items = ["iPhone,98,29","Case,96,25","Elastic Band,56,3"]
columns = ["Item","Rank","Price"]
def sort_list (items):
    converted_list = []
    converted_list_int = []
    for index,item in enumerate (items):
        converted_list.append(items[index].split(','))
    converted_list_int = converted_list
    for j,int_item in enumerate (converted_list_int):
        converted_list_int[j][1] = int(converted_list[j][1])
        converted_list_int[j][2] = int(converted_list[j][2])
    #return converted_list_int
    #list_by_rank= sorted (converted_list_int, key=lambda highest_rate:highest_rate[1],reverse = True)
    list_by_two = sorted (converted_list_int, key=lambda sorted_value1:sorted_value1[1],sorted_value1[2])
    return list_by_two
result = sort_list(items)
print ((columns)*3)
print (result)

#Given that list I need to sort by second element and third. I can only sort by the one "key"
raw_list=["Remote,80,56","Bottle,89,20","Towel,75,10","DuffleBag,95,99","Pants,95,91"]
new_list=[]
sorted_list=[]

def sort_list(raw_list):
    for i,item in enumerate(raw_list):
        #I need to create a new list using the split method with "," for separator
        new_list.append(item.split(","))
        #In place this part replace the second and third element of every item for a integer
        new_list[i][1] = int(new_list[i][1])
        new_list[i][2] = int(new_list[i][2])
    #Once I have the new list now I'm able to sort using either the "rate" or the price
    sorted_list = sorted(new_list,key = lambda item:item[1],reverse=True)
    #If I used this: lambda item:(item[1],item[2]) and if it finds  equals item[1] it will sort by the item[2]
    return sorted_list
    
result = sort_list(raw_list)
print (result)



#How to define a function with input. 
#One way to do this is define or "force" to 
def user_choice():
    '''
    User inputs a number (0-10) and we return this in integer form.
    No parameter is passed when calling this function.
    '''
    choice = int(input("Please input a number (0-10)"))
    return choice
result = user_choice()
print (result)
print(type(result))
