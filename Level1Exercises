#This function define the lesser of two number ONLY when both number are even
#And it will retunr the greater when one or both are odd.
#x and y are the input for the function
def lesser_of_two (x,y):
  if x %2 ==0 and y %2 == 0:
    if x < y:
      return x
    else:
      return y
  elif x %2 ==1 or y %2 ==1:
    if x > y:
      return x
    else:
      return y
result = lesser_of_two(5,11)
print(result)

# Master yoda function to invert the order of the string provided in the function
def masterYoda(input_text):
  split_list = input_text.split()
  split_list.reverse()
  reverse_string = " ".join(split_list)
  return reverse_string
result = masterYoda ("Honey I'm Home")
print (result)

#Find two numbers 3 in a list 
def has_33(nums):
    for index in range (0, len(nums)-1):
        if nums[index] == nums [index+1]:
            return True
        else:
            continue
    return False
result = has_33 ([2,7,6,3])
print (result)

#Given three integers between 1 and 11, if their sum is less than or equal to 21
#return their sum. If their sum exceeds 21 and there's an eleven, reduce the total sum
#by 10. Finally, if the sum (even after adjustment) exceeds 21, return BUST
#Programmer comments: The first part is the "easy" one. Just need to check that the sum
#of the three numbers is less or equal than 21. COOL
#However if their sum is greater than 21 and there is an eleven we need to reduce
#by 10. After the reduction in the last case still exceeds 21, return BUST
#Logic: one "if" statement for the sum less than and one elif to check if it has
#11 on it. The last "else" is to return BUST
#The tricky part is sum the elements of the list
#
def blackjack(a,b,c):
    list_input=[a,b,c]
    list_sum =int()
    reduce_list = int()
    for number in list_input:
        list_sum=list_sum+number
    if list_sum <= 21:
        return list_sum
    elif list_sum > 21 and 11 in list_input:
        reduce_list = list_sum -10
        if reduce_list > 21:
            return "BUST"
        else:
            return reduce_list    
    return list_sum

result = blackjack(11,12,10)
print (result)

##For a given string, return a string where for every character in the original 
#there are three character
#paper_doll("Hello") --> "HHHeeelllooo"
#Programmer comments, I need to iterate trough the string and use de "*" operator
#for every character and return that result
def paper_doll(text):
    new_text =""
    for letter in text:
        new_text = new_text + letter*3
    return new_text
result = paper_doll("Missisippi")
print (result)

#Return the sum of the numbers in the array, except ignore sections of numbers
#starting with a 6 and extending to the next 9 (every 6 will be followed by at least
#one 9). Return 0 for no numbers
#Programmer comments: If there is no six, it's easy. The hard part comes when
#a six is found
#The key here is to understand that i need to use properly the "break" statement
#I made many mistakes, definitely need to check for help because I wasn't 
#sure about how to do it. I did a LOT of debug using the return statement. 

#NOTE TO FIX. It's detecting the number 6 but is adding the number 9 to the summer_69
# Positive note, the number 1 between de 6 and the 9 is not taking in the SUM

def summer_69(array):
    sum =int()
    indicator = True
    for number in array:
        while indicator == True:
            if number !=6:
                sum = sum + number
                break
            else:
                indicator = False
        while indicator == False:
            if number !=9:
                break
            else:
                indicator = True
                break
    return sum, indicator, number
result = summer_69 ([1,7,6,9,1,1])
print (result)

letter = {a:
[" "," "," "," "," "
" "," "," "," "," "
" "," "," "," "," "
" "," "," "," "," "
" "," "," "," "," "]}
]

